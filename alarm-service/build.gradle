plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.4'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'com.epages.restdocs-api-spec' version "0.19.2"
}

group = 'com.musinsam'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "2024.0.1")
}

dependencies {
    implementation project(':common')
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    runtimeOnly 'org.postgresql:postgresql'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'

    // documentation dependencies
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.6'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc:3.0.0'
    testImplementation 'com.epages:restdocs-api-spec-mockmvc:0.19.2'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

ext {
    serviceId = 'alarm-service'
    apiTitle = 'Alarm Service API'
    apiVersion = project.version
    apiDescription = 'Alarm Service API'
}

openapi3 {
    servers = [
            {
                url = "http://localhost:10000"
            }
    ]
    title = 'Alarm Service'
    version = '1.0.0'
    description = ''
    format = 'json'
}

tasks.register('setDocs') {
    dependsOn 'openapi3'
    doLast {
        copy {
            from "build/api-spec"
            include "*.json"
            include "*.yaml"
            into "build/resources/main/static/springdoc"
            rename { String fileName ->
                if (fileName.endsWith('.json')) {
                    return fileName.replace('.json', '-alarm-service.json')
                } else if (fileName.endsWith('.yaml')) {
                    return fileName.replace('.yaml', '-alarm-service.yml')
                }
                return fileName
            }
        }
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

compileJava {
    dependsOn 'clean'
}

bootRun {
    dependsOn 'setDocs'
}

bootJar {
    dependsOn 'setDocs'
}
