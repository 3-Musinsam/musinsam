services:
  redis-user:
    image: redis:latest
    container_name: redis-user
    ports:
      - "6379:6379"
    volumes:
      - ./redis-user-config:/usr/local/etc/redis
    networks:
      - laboratory-network

  redis-coupon:
    image: redis:latest
    container_name: redis-coupon
    ports:
      - "6380:6379"
    volumes:
      - ./redis-coupon-config:/usr/local/etc/redis
    networks:
      - laboratory-network

  redis-order:
    image: redis:latest
    container_name: redis-order
    ports:
      - "6381:6379"
    volumes:
      - ./redis-order-config:/usr/local/etc/redis
    networks:
      - laboratory-network

  postgres:
    image: postgres:latest
    container_name: postgres-db
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
      TZ: Asia/Seoul
    command: [ "postgres", "-c", "log_statement=all", "-c", "log_destination=stderr" ]
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - laboratory-network

  kafka-coupon:
    image: confluentinc/cp-kafka:7.5.1
    container_name: kafka-coupon
    ports:
      - "19092:9092"
    environment:
      KAFKA_NODE_ID: 1
      CLUSTER_ID: 'EpwKlK0lR6qKZW0cGwZz8w'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT'
      KAFKA_LISTENERS: 'PLAINTEXT://:9092,CONTROLLER://:9093'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://localhost:19092'
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka-coupon:9093'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    volumes:
      - ./data/kafka-coupon:/var/lib/kafka/data
    networks:
      - laboratory-network

  kafka-ui-coupon:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui-coupon
    ports:
      - "19090:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=coupon
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka-coupon:9092
    networks:
      - laboratory-network
    depends_on:
      - kafka-coupon

  prometheus-coupon:
    image: prom/prometheus:latest
    container_name: prometheus-coupon
    volumes:
      - ./prometheus/coupon/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus/coupon/rules:/etc/prometheus/rules
      - prometheus_data_coupon:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.listen-address=:9091'
    ports:
      - "39091:9091"
    restart: always
    networks:
      - laboratory-network

  grafana-coupon:
    image: grafana/grafana:latest
    container_name: grafana-coupon
    volumes:
      - grafana_data_coupon:/var/lib/grafana
      - ./grafana/coupon/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "33000:3000"
    depends_on:
      - prometheus-coupon
    restart: always
    networks:
      - laboratory-network

  prometheus-shop:
    image: prom/prometheus:latest
    container_name: prometheus-shop
    volumes:
      - ./prometheus/shop/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus/shop/rules:/etc/prometheus/rules
      - prometheus_data_shop:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.listen-address=:9093'
    ports:
      - "39093:9093"
    restart: always
    networks:
      - laboratory-network

  grafana-shop:
    image: grafana/grafana:latest
    container_name: grafana-shop
    volumes:
      - grafana_data_shop:/var/lib/grafana
      - ./grafana/shop/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "33003:3000"
    depends_on:
      - prometheus-shop
    restart: always
    networks:
      - laboratory-network

  prometheus-alarm:
    image: prom/prometheus:latest
    container_name: prometheus-alarm
    volumes:
      - ./prometheus/alarm/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus/alarm/rules:/etc/prometheus/rules
      - prometheus_data_alarm:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.listen-address=:9094'
    ports:
      - "39094:9094"
    restart: always
    networks:
      - laboratory-network

  grafana-alarm:
    image: grafana/grafana:latest
    container_name: grafana-alarm
    volumes:
      - grafana_data_alarm:/var/lib/grafana
      - ./grafana/alarm/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "33004:3000"
    depends_on:
      - prometheus-alarm
    restart: always
    networks:
      - laboratory-network



  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    command:
      - --web.enable-remote-write-receiver
      - --enable-feature=native-histograms
      - --config.file=/etc/prometheus/prometheus.yml
    networks:
      - laboratory-network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana-dashboard:/dashboard
    depends_on:
      - prometheus
      - loki
    networks:
      - laboratory-network

  loki:
    image: grafana/loki:2.9.3
    container_name: loki
    command: -config.file=/etc/loki/loki-config.yaml
    volumes:
      - ./loki/loki-config.yaml:/etc/loki/loki-config.yaml
      - ./loki/wal:/loki/wal            # ← WAL 저장용
      - ./loki/chunks:/loki/chunks      # ← chunk 저장용
      - ./loki/index:/loki/index        # ← index 저장용
      - ./loki/cache:/loki/cache        # ← cache 저장용
      - ./loki/compactor:/loki/compactor
    ports:
      - "3100:3100"
    networks:
      - laboratory-network

  k6:
    image: grafana/k6
    profiles:
      - "test"
    volumes:
      - ./k6-scripts:/k6-scripts
    command: run --tag testid=order-stress-test -o experimental-prometheus-rw /k6-scripts/order-api-stress-test.js
    env_file:
      - ../.env
    environment:
      - K6_PROMETHEUS_RW_SERVER_URL=http://prometheus:9090/api/v1/write
      - K6_PROMETHEUS_RW_TREND_AS_NATIVE_HISTOGRAM=true
      - TEST_ID=1
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      - prometheus
    networks:
      - laboratory-network

  k6-lock-test:
    image: grafana/k6
    profiles:
      - "test"
    volumes:
      - ./k6-scripts:/k6-scripts
    command: run --tag testid=order-lock-test -o experimental-prometheus-rw /k6-scripts/order-distributed-lock-test.js
    env_file:
      - ../.env
    environment:
      - K6_PROMETHEUS_RW_SERVER_URL=http://prometheus:9090/api/v1/write
      - K6_PROMETHEUS_RW_TREND_AS_NATIVE_HISTOGRAM=true
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      - prometheus
    networks:
      - laboratory-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"
    networks:
      - laboratory-network

  kafka-shop:
    image: confluentinc/cp-kafka:7.5.1
    container_name: kafka-shop
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
    depends_on:
      - zookeeper

  kafka-ui-shop:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui-shop
    ports:
      - "19091:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=shop
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka-shop:9092
    networks:
      - laboratory-network
    depends_on:
      - kafka-shop

  alarm-service:
    build:
      context: ../alarm-service
    container_name: alarm-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
      KAFKA_BOOTSTRAP_SERVERS: kafka-shop:9092
    depends_on:
      - kafka-shop
    ports:
      - "14001:10000"

  shop-service:
    build:
      context: ../shop-service
    container_name: shop-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
      KAFKA_BOOTSTRAP_SERVERS: kafka-shop:9092
    depends_on:
      - kafka-shop
    ports:
      - "11003:10000"

volumes:
  postgres_data:
  grafana-storage:
  prometheus_data_coupon:
  grafana_data_coupon:
  prometheus_data_shop:
  grafana_data_shop:
  prometheus_data_alarm:
  grafana_data_alarm:

networks:
  laboratory-network:
    driver: bridge
